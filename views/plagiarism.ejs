<!DOCTYPE html>
<html lang="en">
<head>
    <title>Anti duplicate software</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.6.0/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.27.0/ace.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <link rel="stylesheet" href="../student user/userpanel.css">   
    <link rel="node" href="../node.js">
    <link rel="script" href="script.js">

</head>
<body>
    <nav>
       
        <div class="Pname">
            <img class="logo" id="loo" src="light1.png">
        <div class="menu">
          <span class="feat"><a class="no" href="../student user/userpanel.html">Home</a></span>
          <span class="feat"><a class="no" href="../plagi">Search</a></span>
          <span class="feat"><a class="no" href="../student user/one-to-one.html">one-to-one</a></span>
          <span class="feat"><a class="no" href="../student user/self detect.html">self detect</a></span>
          <span class="feat"><a class="no" href="../student user/code plagi.html">code</a></span>
          <span class="feat"><a class="Active" href="../plagiarism">All plagi</a></span>
          <span class="feat"><a class="no" href="../student user/userupload.html">File upload</a></span>
                
            <!--<span class="feat"><a class="no" href="http://localhost:3000/">File upload</a></span>-->
            <div class="logout">
                <div class="table1">
                    <div class="profile-dropdown">
                        <a href="profile.html">
                          <div class="img"><div id="image-container1"></div></div>
                        </a>
                        <div class="dropdown-menu">
                            <ul>
                                <li><a href="#"><img id="dark" src="suns.png"></a></li>
                                <li><span ><a href="../student user/profile.html"  class="set" ><i class="fas fa-cog"></i>setting</a></li></span>
                                <li><span class="fe" ><a id="logout-btn" class="noo">log out</a>
                                </span></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
    </nav><br><br><br>
   
    
    
    <div class="container1">
      <div class="find">
        <div class="form">
          <div class="search">
            <p>Project name: - </p>
            <input type="text" id="searchInput" placeholder="Search project name...">
          </div>
          <div class="file-input">
            <p>Choose your project files: - </p>
            <label for="fileUpload">Choose files:</label>
            <input type="file" id="fileUpload" name="fileUpload[]" multiple>
          </div>
        </div>
        <div class="file-display">
        </div>
        <div class="enter">
          <button id="searchButton">Search <i class="fas fa-search"></i></button>
        </div>
        
        <div class="related" id="relatedProjectsContainer"></div>
        
        <div class="enter">
          <button id="CheckPlagiarism">Check Plagiarism <i class="fas fa-check"></i></button>
        </div>
      </div>
      <div id="plagiarismResultsContainer">percentage</div>
    </div>


    <div class="container">
      <div class="order">
        <div class="head2">
          <h3>Projects</h3>
          <i class='bx bx-search' ></i>
          <i class='bx bx-filter' ></i>
        </div>
        <table id="projectTable">
          <thead>
            <tr>
              <th>Username</th>
              <th>Project name</th>
              <th>Summary</th>
            </tr>
          </thead>
          <tbody>
            <% if (data && data.length > 0) { %>
              <% data.forEach(row => { %>
              <tr>
                <td>
                  <h1>Username</h1><p class="data"><%= row.username %></p>
                </td>
                <td>
                  <h1>Project name</h1>( Click on the Project name for files)
                  <p class="data">
                    <!-- Update the link to point to the related route with username and project name parameters -->
                    <a href="#" onclick="loadRelatedProjects('<%= row.username %>', '<%= row.project_name %>')"><%= row.project_name %></a>                  </p>
                </td>
                <td>
                  <h1>Summary</h1>
                  <p class="data"><%= row.summary %></p>
                </td>
                <td>
                  <h1>Frontend Technology used</h1>
                  <p class="data"><%= row.front %></p>
                </td>
                <td>
                  <h1>Backend Technology used</h1>
                  <p class="data"><%= row.back %></p>
                </td>
                <td>
                  <h1>Year</h1>
                  <p class="data"><%= row.year %></p>
                </td>
              </tr>
              <% }); %>
            <% } else { %>
              <div class="msg" id="msg-container" >
                <img class="message" src="notdata.png">
            </div>
            
            <% } %>
           
          </tbody>
        </table>
        <div class="msg" id="msg-container">
          <img class="message" src="https://www.archanaprojects.com/Frontend/images/not-found.png">
        </div>
        
      </div>
    </div>
   
    <script>

      document.addEventListener('DOMContentLoaded', function() {
        const toggleButton = document.getElementById('toggleButton');
        const fileContents = document.querySelectorAll('.file-content');
        const editorContainers = document.querySelectorAll('.editor-container');
    
        // Add click event listener to the toggle button
        toggleButton.addEventListener('click', function() {
            // Toggle the display of file contents and editor containers
            fileContents.forEach(fileContent => {
                toggleDisplay(fileContent);
            });
            editorContainers.forEach(editorContainer => {
                toggleDisplay(editorContainer);
            });
        });
    });
    
    // Function to toggle display property
    function toggleDisplay(element) {
        const currentDisplay = window.getComputedStyle(element).display;
        element.style.display = currentDisplay === 'none' ? 'block' : 'none';
    }

    
      document.addEventListener('DOMContentLoaded', function() {
        const fileContents = document.querySelectorAll('.file-content');
        const editorContainers = document.querySelectorAll('.editor-container');
    
        // Add click event listeners to file contents
        fileContents.forEach(fileContent => {
            fileContent.addEventListener('click', function() {
                toggleDisplay(fileContent);
            });
        });
    
        // Add click event listeners to editor containers
        editorContainers.forEach(editorContainer => {
            editorContainer.addEventListener('click', function() {
                toggleDisplay(editorContainer);
            });
        });
    });
    
    // Function to toggle display property
    function toggleDisplay(element) {
        const currentDisplay = window.getComputedStyle(element).display;
        element.style.display = currentDisplay === 'none' ? 'block' : 'none';
    }
    


    function displaySavedImage(imageData) {
      const imageContainer = document.getElementById('image-container1');
      const image = new Image();
      image.src = imageData;
      imageContainer.appendChild(image);
    }
    
    // Load the saved image from local storage when the page loads
    window.onload = function() {
      const savedImageData = localStorage.getItem('kappa_savedImage');
      if (savedImageData) {
          displaySavedImage(savedImageData);
      }
    };
    
      function saveImage() {
      const input = document.getElementById('image-input');
      const file = input.files[0];
      
      // Check if username exists in cookies
      const username = getCookie('username');
      if (!username) {
          alert("Please enter your username first.");
          return;
      }
      
      if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
              const imageData = event.target.result;
              // Store image data along with username in local storage
              localStorage.setItem(username + '_savedImage', imageData);
              displayImageInMultipleContainers(imageData);
          };
          reader.readAsDataURL(file);
      }
  }
  
  function displayImageInMultipleContainers(imageData) {
      // Get both image containers by their IDs
      const container1 = document.getElementById('image-container1');
      const container2 = document.getElementById('image-container2');
      
      // Set the inner HTML of both containers to display the image
      container1.innerHTML = `<img src="${imageData}" alt="Saved Image">`;
      container2.innerHTML = `<img src="${imageData}" alt="Saved Image">`;
  }
  
  // Load the image from localStorage when the page loads
  window.onload = function() {
      // Check if username exists in cookies
      const username = getCookie('username');
      if (!username) {
          const usernamePrompt = prompt("Please enter your username:");
          if (usernamePrompt) {
              document.cookie = `username=${usernamePrompt}`;
          }
      }
      
      const savedImageData = localStorage.getItem(username + '_savedImage');
      if (savedImageData) {
          displayImageInMultipleContainers(savedImageData);
      }
  };
  
  // Function to get the value of a cookie by its name
  function getCookie(name) {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.startsWith(name + '=')) {
              return cookie.substring(name.length + 1);
          }
      }
      return null;
  }

const darkModePreference = localStorage.getItem('darkMode');

// Function to toggle dark mode
function toggleDarkMode() {
  document.body.classList.toggle("dark-theme");

  if (document.body.classList.contains("dark-theme")) {
    localStorage.setItem('darkMode', 'enabled');
    dark.src = "moons.png";
    loo.src = "dark1.png";
  } else {
    localStorage.setItem('darkMode', 'disabled');
    dark.src = "suns.png";
    loo.src = "light1.png";
  }
}

// Apply dark mode based on user preference
if (darkModePreference === 'enabled') {
  document.body.classList.add('dark-theme');
  dark.src = "moons.png";
  loo.src = "dark1.png";
} else {
  dark.src = "suns.png";
  loo.src = "light1.png";
}

dark.onclick = toggleDarkMode;

function removeComments(content) {
  // Regular expression to match comments (// single-line comments and /* multi-line comments */)
  const commentRegex = /\/\/.*?$|\/\*[\s\S]*?\*\//gm;
  return content.replace(commentRegex, ''); // Remove comments from the content
}

function compareContent(content1, content2) {
  // Remove comments from both contents
  const trimmedContent1 = removeComments(content1).trim();
  const trimmedContent2 = removeComments(content2).trim();

  const minLength = Math.min(trimmedContent1.length, trimmedContent2.length);
  let matchingChars = 0;

  for (let i = 0; i < minLength; i++) {
    if (trimmedContent1[i] === trimmedContent2[i]) {
      matchingChars++;
    }
  }

  const plagiarismPercentage = (matchingChars / minLength) * 100;
  return plagiarismPercentage.toFixed(2);
}

function checkPlagiarism() {
  const relatedEditors = Array.from(document.querySelectorAll('#relatedProjectsContainer .ace_editor'));
  const fileEditors = Array.from(document.querySelectorAll('.file-display .ace_editor'));

  const plagiarismResultsContainer = document.getElementById('plagiarismResultsContainer');
  plagiarismResultsContainer.innerHTML = '';

  let totalPlagiarismPercentage = 0; // Total plagiarism percentage
  let editorCount = 0; // Number of editors

  relatedEditors.forEach((relatedEditorNode, i) => {
    const relatedEditor = ace.edit(relatedEditorNode);
    const relatedContent = relatedEditor.getValue();

    let maxPlagiarismPercentage = 0;

    fileEditors.forEach((fileEditorNode, j) => {
      const fileEditor = ace.edit(fileEditorNode);
      const fileContent = fileEditor.getValue();
      const plagiarismPercentage = parseFloat(compareContent(relatedContent, fileContent));

      if (plagiarismPercentage > maxPlagiarismPercentage) {
        maxPlagiarismPercentage = plagiarismPercentage;
      }
    });

    totalPlagiarismPercentage += maxPlagiarismPercentage;
    editorCount++;

    const resultElement = document.createElement('div');
    resultElement.textContent = `Plagiarism Percentage for Editor ${i + 1}: ${maxPlagiarismPercentage}%`;
    plagiarismResultsContainer.appendChild(resultElement);
  });

  const averagePlagiarismPercentage = totalPlagiarismPercentage / editorCount;

  const totalResultElement = document.createElement('div');
  totalResultElement.textContent = `Total Plagiarism Percentage: ${averagePlagiarismPercentage.toFixed(2)}%`;
  plagiarismResultsContainer.appendChild(totalResultElement);
}


// Add event listener to the button for checking plagiarism
const checkPlagiarismButton = document.getElementById('CheckPlagiarism');
checkPlagiarismButton.addEventListener('click', checkPlagiarism);


// Function to fetch file content using AJAX
function fetchFileContent(fileName) {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          resolve(xhr.responseText);
        } else {
          reject(new Error(`Failed to fetch content of file: ${fileName}`));
        }
      }
    };
    xhr.open('GET', fileName);
    xhr.send();
  });
}



document.addEventListener('DOMContentLoaded', function() {
  const editors = Array.from(document.querySelectorAll('.editor'));
  
  // Initialize an object to store the highest plagiarism percentage for each comparison
  const highestPlagiarism = {};
  
  // Iterate over each editor
  editors.forEach((currentEditor, i) => {
      const currentEditorContent = currentEditor.getValue();
      
      // Compare with all other editors
      editors.forEach((comparedEditor, j) => {
          if (i !== j) {
              const comparedEditorContent = comparedEditor.getValue();
              
              // Compare contents and calculate plagiarism percentage
              const plagiarismPercentage = compareContent(currentEditorContent, comparedEditorContent);
              
              // Update highest plagiarism percentage for this editor
              if (!highestPlagiarism[i] || plagiarismPercentage > highestPlagiarism[i].percentage) {
                  highestPlagiarism[i] = {
                      editorIndex: j,
                      percentage: plagiarismPercentage
                  };
              }
          }
      });
  });

  // Display the highest plagiarism percentage for each editor comparison
  for (const editorIndex in highestPlagiarism) {
      const comparedEditorIndex = highestPlagiarism[editorIndex].editorIndex;
      const plagiarismPercentage = highestPlagiarism[editorIndex].percentage;
      
      console.log(`Plagiarism Percentage between Editor ${parseInt(editorIndex) + 1} and Editor ${comparedEditorIndex + 1}: ${plagiarismPercentage.toFixed(2)}%`);
  }
});

document.addEventListener('DOMContentLoaded', function() {
  const relatedProjectsContainer = document.getElementById('relatedProjectsContainer');
  const editor = document.getElementById('editor');

  // Function to fetch related projects from the server
  function fetchRelatedProjects(username, projectName) {
    fetch(`/plagiarism/${username}/${projectName}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Clear the container
        relatedProjectsContainer.innerHTML = '';

        // Iterate through the data and append to the container
        data.forEach(row => {
          const filename = row.filename;
          let dataContent = row.data;

          // Parse JSON data if present
          if (dataContent && typeof dataContent === 'string') {
            try {
              dataContent = JSON.parse(dataContent);
            } catch (error) {
              console.error('Error parsing JSON data:', error);
            }
          }

          const fileElement = document.createElement('div');
          fileElement.classList.add('file');

          // Create a span element to hold the file name
          const fileNameElement = document.createElement('span');
          fileNameElement.textContent = filename;
          fileElement.appendChild(fileNameElement);

          // Set the content icon based on dataContent existence and type
          const contentIcon = dataContent ? (typeof dataContent === 'string' ? ' 🔄' : ' ✔️') : ' ❌';
          
          // Append the content icon to the file element
          const contentIconElement = document.createElement('span');
          contentIconElement.textContent = contentIcon;
          fileElement.appendChild(contentIconElement);

          fileElement.addEventListener('click', () => {
            displayFileContent(filename, dataContent);
          });

          relatedProjectsContainer.appendChild(fileElement);

          // Create a new div element for the ACE editor
          const editorContainer = document.createElement('div');
          editorContainer.classList.add('editor-container');
          relatedProjectsContainer.appendChild(editorContainer);

          // Create a new Ace Editor instance for the editor container
          const editor = ace.edit(editorContainer);
          editor.setTheme("ace/theme/merbivore"); // Set the theme
          editor.session.setMode("ace/mode/javascript"); // Set the mode

          // Set the content of the editor
          if (typeof dataContent === 'object') {
            editor.session.setValue(JSON.stringify(dataContent, null, 2));
          } else {
            editor.session.setValue(dataContent);
          }

          // Set editor options
          editor.setReadOnly(true); // Make the editor read-only

          // Adjust editor size if needed
          editor.resize();
        });
      })
      .catch(error => {
        console.error('Error fetching related projects:', error);
      });
  } 

  // Function to display file content
  function displayFileContent(filename, content) {
    const editor = ace.edit("editor");
    editor.setTheme("ace/theme/cobalt"); // Set the theme (optional)
    editor.session.setMode("ace/mode/javascript"); // Set the mode (optional)

    // Clear the editor and set the content
    if (typeof content === 'object') {
      editor.session.setValue(JSON.stringify(content, null, 2));
    } else {
      editor.session.setValue(content);
    }

    // Display the filename above the editor
    const filenameElement = document.getElementById('filename');
    filenameElement.textContent = filename;
  }

  // Call fetchRelatedProjects function when the page loads
  fetchRelatedProjects('username', 'projectName'); // Replace 'username' and 'projectName' with actual values
});


function loadRelatedProjects(username, projectName) {
  fetch(`/plagiarism/${username}/${projectName}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      const container = document.getElementById('relatedProjectsContainer');
      container.innerHTML = '';

      data.forEach(row => {
        let filename = row.filename; // Extract filename from the row
        let dataContent = row.data;

        // Parse JSON data if present
        if (typeof dataContent === 'string') {
          try {
            dataContent = JSON.parse(dataContent);
          } catch (error) {
            // If parsing fails, assume it's plain text
          }
        }

        // Create a new container for each file
        const fileContainer = document.createElement('div');
        fileContainer.classList.add('file-container');
        container.appendChild(fileContainer);

        // Create a span element to hold the filename
        const fileNameElement = document.createElement('span');
        fileNameElement.textContent = filename; // Set the filename as text content
        fileContainer.appendChild(fileNameElement);

        // Create a new div element for the ACE editor
        const editorContainer = document.createElement('div');
        editorContainer.classList.add('editor-container');
        fileContainer.appendChild(editorContainer);

        // Create a new Ace Editor instance for the editor container
        const editor = ace.edit(editorContainer);
        editor.setTheme("ace/theme/merbivore"); // Set the theme
        editor.session.setMode("ace/mode/javascript"); // Set the mode

        // Set the content of the editor
        if (typeof dataContent === 'object') {
          editor.session.setValue(JSON.stringify(dataContent, null, 2));
        } else {
          editor.session.setValue(dataContent);
        }

        // Set editor options
        editor.setReadOnly(true); // Make the editor read-only

        // Adjust editor size if needed
        editor.resize();
      });
    })
    .catch(error => {
      console.error('Error fetching related projects:', error);
    });
}


function displayFileContent(filename, content) {
  const editor = ace.edit("editor");
  editor.setTheme("ace/theme/cobalt"); // Set the theme (optional)
  editor.session.setMode("ace/mode/css"); // Set the mode (replace 'css' with the appropriate mode for your content)

  // Check if the content is an object (likely JSON data)
  if (typeof content === 'object') {
      // Convert the JSON object to a formatted string
      content = JSON.stringify(content, null, 2);
  }

  // Set the content of the editor
  editor.setValue(content);

  // Get all the file contents to compare
  const allFileContents = Array.from(document.querySelectorAll('.file-item'), fileItem => fileItem.textContent);

  // Iterate through each file content to find plagiarized parts
  allFileContents.forEach(fileContent => {
      // Highlight plagiarized parts in the editor
      highlightPlagiarizedContent(editor, content, fileContent);
  });

  // Move the cursor to the beginning of the content
  editor.gotoLine(1);

  // Display the filename above the editor
  const filenameElement = document.getElementById('filename');
  filenameElement.textContent = filename;
}

document.addEventListener('DOMContentLoaded', function() {
  loadRelatedProjects('username', 'projectName');
});


const fileInput = document.getElementById('fileUpload');
const fileDisplay = document.querySelector('.file-display');

fileInput.addEventListener('change', function() {
  // Clear previous content in the file display container
  fileDisplay.innerHTML = '';

  // Check if the system or browser preference is dark or light mode
  const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

  // Loop through each selected file
  for (let i = 0; i < this.files.length; i++) {
      const file = this.files[i];
      const reader = new FileReader();

      reader.onload = function(event) {
          const fileContent = event.target.result;

          // Create a new container for the filename and ACE editor
          const container = document.createElement('div');
          container.classList.add('file-container');
          fileDisplay.appendChild(container);

          // Create a new div element for the filename
          const filenameElement = document.createElement('div');
          filenameElement.classList.add('filename');
          filenameElement.textContent = file.name; // Set the filename as text content
          container.appendChild(filenameElement);

          // Create a new ACE Editor element for each file
          const editorContainer = document.createElement('div');
          editorContainer.classList.add('file-content');
          container.appendChild(editorContainer); // Append the editor container to the file display container

          // Initialize the ACE Editor
          const editor = ace.edit(editorContainer);
          const theme = isDarkMode ? "ace/theme/tomorrow_night_bright" : "ace/theme/chrome"; // Use dark or light theme based on system preference
          editor.setTheme(theme);
          editor.session.setMode("ace/mode/css"); // Set the mode (optional)

          // Set the file content to the ACE Editor
          editor.setValue(fileContent);
          editor.clearSelection();
      };

      // Read the file as text
      reader.readAsText(file);
  }
});

/*/ Get the file input element
const fileInput = document.getElementById('fileUpload');
// Get the file display element
const fileDisplay = document.querySelector('.file-display');
// Get the file data display element
const fileContent = document.getElementById('fileContent');

// Add event listener for file input change
fileInput.addEventListener('change', function() {
  // Clear previous file display
  fileDisplay.innerHTML = '';
  // Loop through each selected file
  for (const file of this.files) {
    // Create a div element for each file
    const fileDiv = document.createElement('div');
    // Set the class for styling
    fileDiv.classList.add('file-item');
    // Display the file name
    fileDiv.textContent = file.name;
    // Append the file div to the file display container
    fileDisplay.appendChild(fileDiv);
    
    // Read file content and display it
    readFileContent(file, fileDiv);
  }
});

// Function to read file content and display it
function readFileContent(file, fileDiv) {
  const reader = new FileReader();
  reader.onload = function(event) {
    // Display the file content
    const content = event.target.result;
    if (content.trim() !== '') {
      // Content found, display a checkmark
      fileDiv.textContent = file.name + ' ✔️';
    } else {
      // No content found, display a cross
      fileDiv.textContent = file.name + ' ❌';
    }
  };
  // Read the file as text
  reader.readAsText(file);
}*/


const searchInput = document.getElementById('searchInput');
const projectTable = document.getElementById('projectTable');
const rows = projectTable.getElementsByTagName('tr');
const searchButton = document.getElementById('searchButton'); // Get the search button element
const msgContainer = document.getElementById('msg-container'); // Get the message container element
const messageImage = document.querySelector('.message'); // Get the message image element

// Function to hide all rows initially
function hideAllRows() {
  for (let i = 1; i < rows.length; i++) {
    rows[i].style.display = 'none';
  }
}

// Call hideAllRows function initially to hide all rows
hideAllRows();
messageImage.style.display = 'none'; // Hide the message image initially

// Function to filter rows based on search input
function filterRows() {
  const searchText = searchInput.value.trim().toLowerCase(); // Trim whitespace from input
  if (searchText === '') {
    hideAllRows(); // If search input is empty, hide all rows
    msgContainer.style.display = 'none'; // Hide the message container
    messageImage.style.display = 'none'; // Hide the message image
    return; // Exit the function
  }
  let dataFound = false; // Flag to track if data is found
  for (let i = 1; i < rows.length; i++) {
    const projectName = rows[i].getElementsByTagName('td')[1].innerText.toLowerCase();
    if (projectName.includes(searchText)) {
      rows[i].style.display = ''; // Display rows that match the search query
      dataFound = true; // Set dataFound flag to true
    } else {
      rows[i].style.display = 'none'; // Hide rows that don't match the search query
    }
  }
  // Show or hide message container based on dataFound flag
  if (dataFound) {
    msgContainer.style.display = 'none'; // Hide the message container if data is found
    messageImage.style.display = 'none'; // Hide the message image if data is found
  } else {
    msgContainer.style.display = 'block'; // Show the message container if no data is found
    messageImage.style.display = 'block'; // Show the message image if no data is found
  }
}

// Add event listener to the search button
searchButton.addEventListener('click', function(event) {
  event.preventDefault(); // Prevent default button behavior
  filterRows(); // Call the filterRows function when the button is clicked
});

searchInput.addEventListener('keyup', function(event) {
  if (event.keyCode === 13) { // Check if Enter key is pressed
    event.preventDefault(); // Prevent default Enter key behavior
    filterRows(); // Call the filterRows function when Enter key is pressed
  }
});

</script>

      
  <style>

    .container .msg{
      justify-content: center;
      display: flex;
      width: 100%;
    }

    .container img{
      margin: 35%;
      margin-top: 0%;
      margin-left: auto;
      margin-right: auto;
      display: flex;
    }

    .container1 {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-right: 1.8rem;
      
    }
    
    #editor {
      font-family: Arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      width: 50vw; /* Set the width to 400 pixels */
      word-wrap: break-word; /* Wrap long words */
      
    }
    
    
    
    #plagiarismResultsContainer{
      background-color: #0a75e7;
      padding: 10px;
      color: white;
      border-radius: 0.5rem;
      margin: 1rem;
    }


    .related {
      margin-top: 10px;
      color: white;
      display: flex; 
      flex-wrap: wrap;
      cursor: pointer;
      justify-content: center;
    }
    
    .file-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      border: 1px solid #ccc;
      background-color: #050016;
      padding: 10px 10px 10px 10px;
      border-radius: 0.3rem;
      width: calc(20% - 20px);
      margin-bottom: 1rem;
      white-space: 2rem;
      margin-left: 0.5rem;
      margin-right: 0.5rem;
      text-align: center;
      display: inline;
    }
    
    .file {
      background-color: rgb(2, 0, 22);
      padding: 3px 10px 0px 10px;
      border-radius: 0.3rem;
      border: 2px solid white;
    }
    
    .file-container:hover {
      background-color: rgb(29, 28, 28);
    }

    .editor-container {
      height: 10px; /* Set the height as desired */
      border: 1px solid #ccc;
      display: none;
    }


    .file-content{
      display: none;
}

/* Adjustments for responsiveness */
@media (max-width: 768px) {
  .related .file {
    width: 50%; /* Each file takes up 50% of the container width on smaller screens */
  }
}

.file-item {
  background-color: black; 
  padding: 5px;
  margin-right: 10px; /* Add margin between file names */
  color: white; 
  border-radius: 0.3rem;
  display: inline-block; /* Display files inline */
  /* Set width to accommodate 5 files in a row with margin */
  width: calc(20% - 10px);
  margin-bottom: 10px; /* Add margin at the bottom */
  padding: 10px;
}

.file-display {
  margin-top: 10px;
  color: white;
  display: flex; /* Use flexbox */
  flex-wrap: wrap; /* Allow items to wrap to the next line */
  cursor: pointer;
  justify-content: center;
  overflow: auto;
}


.file-content{
  width: 15vw;
  height: 15vh;
  overflow: auto;
  margin: 1rem;
  border-radius: 0.5rem;
  border: 2px solid white;
}

.file-item:hover {
  background-color: rgb(29, 28, 28);
}



    label[for="fileUpload"] {
      display: inline-block;
      padding: 10px;
      background-color: #ff1313;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
    }
    
    #fileUpload {
      display: none;
    }
    

    
    /* Styles for file data */
    .file-data {
      margin-top: 20px;
    }
    
    .file-data h3 {
      margin-bottom: 10px;
    }
    
    /* Styles for ACE Editor */
    #editor {
      width: 50%;
      height: 30px; 
      border: 1px solid #ccc;
      border-radius: 5px;
      position:relative;
    }
    .search {
      display: flex;
      margin-top: 1rem;
      justify-content: center; /* Center horizontally */
      align-items: center;
      margin-left: 2rem;
      margin-right: 2rem;
    }

    .file-input {
      display: flex;
      justify-content: center; /* Center horizontally */
      align-items: center; 
    }

  .file-input p {
    color: white;
    margin-right: 1rem;
    background-color: #4062be;
    padding: 10px;
    border-radius: 0.3rem;
    font-weight: bold;
}

  .file-input label {
      margin-right: 1rem; 
  }
    
    .find{
      justify-content: center; 
      align-items: center;
      background-color: #0056b3;
      margin-top: 2rem;
      margin-left: 2rem;
      border-radius: 0.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 0 5px var(--h1-color);
    }
    #searchInput {
      width: 300px;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
      font-size: 16px;
      margin-top: 1rem;
    }
    
    #searchInput::placeholder {
      color: #999;
    }
    
    #searchInput:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
    }
    
    #searchButton {
      background-color: #ff0000;
      font-size: small;
      padding: 7px;
      border: none;
      color: #ffffff;
      border-radius: 0.3rem;
      cursor: pointer;
      margin-bottom: 1rem;
      margin-top: 1rem;
    }
    #searchButton:hover{
      background-color: #f52121;
      border: 1px solid white ;

    }

    #CheckPlagiarism {
      background-color: #ff0000;
      font-size: small;
      padding: 7px;
      border: none;
      color: #ffffff;
      border-radius: 0.3rem;
      cursor: pointer;
      margin-bottom: 1rem;
      margin-top: 1rem;
    }
    #CheckPlagiarism:hover{
      background-color: #f52121;
      border: 1px solid white ;

    }

    .enter{
      text-align-last: center;
    }
    
    .search p{
      color: white;
      margin-right: 1rem;
      background-color: #4062be;
      padding: 10px;
      border-radius: 0.3rem;
      font-weight: bold;

    }
    .container {
      width: 80vw;
      margin: 0 auto;
      color: var(--h1-color);
    }
    
  
    
    .head2 {
      margin-bottom: 20px;
    }
    
  
  
    h3{
      color: var(--primary-color);
      background: var(--h1-color);
      padding: 10px;
      border-radius: 0.3rem;
      text-align: center;
      box-shadow: 0 0 10px var(--h1-color);
      border: 1px solid var(--primary-color);
    }
  
    #projectTable {
      width: 100%;
    }
    
    #projectTable tr {
      display: flex;
      flex-direction: column;
      border: 1px solid var(--h1-color);
      margin-bottom: 4rem;
      margin-top: 1rem;
      border-radius: 0.5rem;
    }
    
    #projectTable th,
    #projectTable td {
      padding: 10px 10px 0px 10px;
    }
    
    #projectTable th {
      font-weight: bold;
    }
    
    .datas {
      display: flex;
      flex-direction: row;
    }
    
    .datas h4 {
      margin: 0;
      width: 120px; /* Adjust as needed for label width */
    }
    
    .datas p {
      margin: 0;
    }
    
  
  .option {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
    
  }
  
  .goe {
    text-align: center;
    background-color:var(--study-color);
    margin: 0 5px; /* Adjust the margin as needed */
    padding: 5px 10px; /* Adjust the padding as needed */
    text-decoration: none;
    color: var(--third-color);
    border-radius: 5px;
  }
  
  .goe:hover {
    background-color: var(--error-color);
  }
  
  #feat{
    text-decoration: underline;
    box-shadow: 0 0 5px var(--h1-color);
    border: 1px solid var(--third-color);
  }
  

  .input{
    align-content: center;
    padding: 0px 70px 0px 70px;
    border-radius: 0.5rem;
    width: 30vw;
    background-color: #2268ff;
  }
  
  i{
    color: var(--h1-color);
  }
  
  .no{
    margin-bottom: 3rem;
  }
  
  thead{
    display: none;
  }
  
  .container h1 {
    font-size: 1.5em;
    margin-bottom: 0.3rem;
    background: var(--study-color);
    padding: 6px 0px 6px 10px;
    border-radius: 0.5rem;
  }
  
  .datas {
    margin-bottom: 4rem;
    border: 2px solid var(--h1-color);
    padding: 20px;
    border-radius: 0.5rem
  }
  
  .data {
    font-size: 1em;
    margin-bottom: 1rem;
    margin-top: 0.5rem;
    background: var(--copied-color);
    padding: 1rem;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px var(--h1-color); /* Add box shadow */
  }
  
  .Download {
    background-color: #f80808;
    padding: 10px;
    display: flex;
    width: max-content;
    margin-bottom: 1rem;
    border-radius: 0.3rem;
    color: white;
    transition: background-color 0.3s, transform 0.3s;
  }
  
  .Download:hover {
    background-color: #d60606; 
    transform: translateY(-4px); 
  }
  
  .Download i{
    margin-right: 0.5rem;
  }
  
  .set i{
    color: white;
  }

  #filename {
    font-weight: bold;
    color: #333; /* Adjust color as needed */
    width: 10px;
  }
  
  
  </style>
  </html>
  