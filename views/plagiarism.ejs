<!DOCTYPE html>
<html lang="en">
<head>
    <title>Anti duplicate software</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.6.0/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.27.0/ace.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <link rel="stylesheet" href="../student user/userpanel.css">   
    <link rel="node" href="../node.js">
    <link rel="script" href="script.js">

</head>
<body>
    <nav>
       
        <div class="Pname">
            <img class="logo" id="loo" src="light1.png">
        <div class="menu">
          <span class="feat"><a class="no" href="../student user/userpanel.html">Home</a></span>
          <span class="feat"><a class="no" href="../plagi">Search</a></span>
          <span class="feat"><a class="no" href="../student user/one-to-one.html">one-to-one</a></span>
          <span class="feat"><a class="no" href="../student user/self detect.html">self detect</a></span>
          <span class="feat"><a class="no" href="../student user/code plagi.html">code</a></span>
          <span class="feat"><a class="Active" href="../plagiarism">All plagi</a></span>
          <span class="feat"><a class="no" href="../student user/userupload.html">File upload</a></span>
                
            <!--<span class="feat"><a class="no" href="http://localhost:3000/">File upload</a></span>-->
            <div class="logout">
                <div class="table1">
                    <div class="profile-dropdown">
                        <a href="profile.html">
                          <div class="img"><div id="image-container1"></div></div>
                        </a>
                        <div class="dropdown-menu">
                            <ul>
                                <li><a href="#"><img id="dark" src="suns.png"></a></li>
                                <li><span ><a href="../student user/profile.html"  class="set" ><i class="fas fa-cog"></i>setting</a></li></span>
                                <li><span class="fe" ><a id="logout-btn" class="noo">log out</a>
                                </span></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
    </nav><br><br><br>
   
    
    
    <div class="container">
      <div class="find">
        <div class="form">
          <div class="search">
            <p>Project name: - </p>
            <input type="text" id="searchInput" placeholder="Search project name...">
          </div>
          <div class="file-input">
            <p>Choose your project files: - </p>
            <label for="fileUpload">Choose files:</label>
            <input type="file" id="fileUpload" name="fileUpload[]" multiple>
          </div>
        </div>
        <div class="file-display">
        </div>
        <div class="enter">
          <button id="searchButton">Search <i class="fas fa-search"></i></button>
        </div>
        <div class="related" id="relatedProjectsContainer"></div>
        <div class="enter">
          <button id="CheckPlagiarism">Check Plagiarism <i class="fas fa-check"></i></button>
        </div>
      </div>
      <div id="plagiarismResultsContainer">percentage</div> <!-- Adding the plagiarism results container -->
    </div>



      <div class="order">
        <div class="head2">
          <h3>Projects</h3>
          <i class='bx bx-search'></i>
          <i class='bx bx-filter'></i>
        </div>
        <table id="projectTable">
          <thead>
            <tr>
              <th>Username</th>
              <th>Project name</th>
              <th>Summary</th>
            </tr>
          </thead>
          <tbody>
            <% if (data && data.length > 0) { %>
            <% data.forEach(row => { %>
            <tr>
              <td>
                <p class="datas"><%= row.username %></p>
              </td>
              <td>
                <p class="datas">
                  <!-- Update the link to point to the related route with username and project name parameters -->
                  <a class="data" href="#" onclick="loadRelatedProjects('<%= row.username %>', '<%= row.project_name %>')"><%= row.project_name %></a>
                </p>
              </td>
              <td>
                <p class="data"><%= row.summary %></p>
              </td>
            </tr>
            <% }); %>
            <% } else { %>
            <tr>
              <td>
                <p class="message">Data was not found or Empty</p>
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
    
    <script>

      // Function to display the saved image
function displaySavedImage(imageData) {
  const imageContainer = document.getElementById('image-container1');
  const image = new Image();
  image.src = imageData;
  imageContainer.appendChild(image);
}

// Load the saved image from local storage when the page loads
window.onload = function() {
  const savedImageData = localStorage.getItem('kappa_savedImage');
  if (savedImageData) {
      displaySavedImage(savedImageData);
  }
};

const darkModePreference = localStorage.getItem('darkMode');

// Function to toggle dark mode
function toggleDarkMode() {
  document.body.classList.toggle("dark-theme");

  if (document.body.classList.contains("dark-theme")) {
    localStorage.setItem('darkMode', 'enabled');
    dark.src = "moons.png";
    loo.src = "dark1.png";
  } else {
    localStorage.setItem('darkMode', 'disabled');
    dark.src = "suns.png";
    loo.src = "light1.png";
  }
}

// Apply dark mode based on user preference
if (darkModePreference === 'enabled') {
  document.body.classList.add('dark-theme');
  dark.src = "moons.png";
  loo.src = "dark1.png";
} else {
  dark.src = "suns.png";
  loo.src = "light1.png";
}

dark.onclick = toggleDarkMode;

function removeComments(content) {
  // Regular expression to match comments (// single-line comments and /* multi-line comments */)
  const commentRegex = /\/\/.*?$|\/\*[\s\S]*?\*\//gm;
  return content.replace(commentRegex, ''); // Remove comments from the content
}

function compareContent(content1, content2) {
  // Remove comments from both contents
  const trimmedContent1 = removeComments(content1).trim();
  const trimmedContent2 = removeComments(content2).trim();

  const minLength = Math.min(trimmedContent1.length, trimmedContent2.length);
  let matchingChars = 0;

  for (let i = 0; i < minLength; i++) {
    if (trimmedContent1[i] === trimmedContent2[i]) {
      matchingChars++;
    }
  }

  const plagiarismPercentage = (matchingChars / minLength) * 100;
  return plagiarismPercentage.toFixed(2);
}

function checkPlagiarism() {
  const relatedEditors = Array.from(document.querySelectorAll('#relatedProjectsContainer .ace_editor'));
  const fileEditors = Array.from(document.querySelectorAll('.file-display .ace_editor'));

  const plagiarismResultsContainer = document.getElementById('plagiarismResultsContainer');
  plagiarismResultsContainer.innerHTML = '';

  let totalPlagiarismPercentage = 0; // Total plagiarism percentage
  let editorCount = 0; // Number of editors

  relatedEditors.forEach((relatedEditorNode, i) => {
    const relatedEditor = ace.edit(relatedEditorNode);
    const relatedContent = relatedEditor.getValue();

    let maxPlagiarismPercentage = 0;

    fileEditors.forEach((fileEditorNode, j) => {
      const fileEditor = ace.edit(fileEditorNode);
      const fileContent = fileEditor.getValue();
      const plagiarismPercentage = parseFloat(compareContent(relatedContent, fileContent));

      if (plagiarismPercentage > maxPlagiarismPercentage) {
        maxPlagiarismPercentage = plagiarismPercentage;
      }
    });

    totalPlagiarismPercentage += maxPlagiarismPercentage;
    editorCount++;

    const resultElement = document.createElement('div');
    resultElement.textContent = `Plagiarism Percentage for Editor ${i + 1}: ${maxPlagiarismPercentage}%`;
    plagiarismResultsContainer.appendChild(resultElement);
  });

  const averagePlagiarismPercentage = totalPlagiarismPercentage / editorCount;

  const totalResultElement = document.createElement('div');
  totalResultElement.textContent = `Total Plagiarism Percentage: ${averagePlagiarismPercentage.toFixed(2)}%`;
  plagiarismResultsContainer.appendChild(totalResultElement);
}


// Add event listener to the button for checking plagiarism
const checkPlagiarismButton = document.getElementById('CheckPlagiarism');
checkPlagiarismButton.addEventListener('click', checkPlagiarism);


// Function to fetch file content using AJAX
function fetchFileContent(fileName) {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          resolve(xhr.responseText);
        } else {
          reject(new Error(`Failed to fetch content of file: ${fileName}`));
        }
      }
    };
    xhr.open('GET', fileName);
    xhr.send();
  });
}



document.addEventListener('DOMContentLoaded', function() {
  const editors = Array.from(document.querySelectorAll('.editor'));
  
  // Initialize an object to store the highest plagiarism percentage for each comparison
  const highestPlagiarism = {};
  
  // Iterate over each editor
  editors.forEach((currentEditor, i) => {
      const currentEditorContent = currentEditor.getValue();
      
      // Compare with all other editors
      editors.forEach((comparedEditor, j) => {
          if (i !== j) {
              const comparedEditorContent = comparedEditor.getValue();
              
              // Compare contents and calculate plagiarism percentage
              const plagiarismPercentage = compareContent(currentEditorContent, comparedEditorContent);
              
              // Update highest plagiarism percentage for this editor
              if (!highestPlagiarism[i] || plagiarismPercentage > highestPlagiarism[i].percentage) {
                  highestPlagiarism[i] = {
                      editorIndex: j,
                      percentage: plagiarismPercentage
                  };
              }
          }
      });
  });

  // Display the highest plagiarism percentage for each editor comparison
  for (const editorIndex in highestPlagiarism) {
      const comparedEditorIndex = highestPlagiarism[editorIndex].editorIndex;
      const plagiarismPercentage = highestPlagiarism[editorIndex].percentage;
      
      console.log(`Plagiarism Percentage between Editor ${parseInt(editorIndex) + 1} and Editor ${comparedEditorIndex + 1}: ${plagiarismPercentage.toFixed(2)}%`);
  }
});




document.addEventListener('DOMContentLoaded', function() {
  const relatedProjectsContainer = document.getElementById('relatedProjectsContainer');
  const editor = document.getElementById('editor');

  // Function to fetch related projects from the server
 // Function to fetch related projects from the server
// Function to fetch related projects from the server
function fetchRelatedProjects(username, projectName) {
fetch(`/plagiarism/${username}/${projectName}`)
.then(response => {
if (!response.ok) {
  throw new Error('Network response was not ok');
}
return response.json();
})
.then(data => {
// Clear the container
relatedProjectsContainer.innerHTML = '';

// Iterate through the data and append to the container
data.forEach(row => {
  const filename = row.filename;
  let dataContent = row.data;

  // Parse JSON data if present
  if (dataContent && typeof dataContent === 'string') {
    try {
      dataContent = JSON.parse(dataContent);
    } catch (error) {
      console.error('Error parsing JSON data:', error);
    }
  }

  const fileElement = document.createElement('div');
  fileElement.classList.add('file');

  // Set the content icon based on dataContent existence and type
  const contentIcon = dataContent ? (typeof dataContent === 'string' ? ' 🔄' : ' ✔️') : ' ❌';
  
  fileElement.textContent = filename + contentIcon;

  fileElement.addEventListener('click', () => {
    displayFileContent(filename, dataContent);
  });

  relatedProjectsContainer.appendChild(fileElement);
});
})
.catch(error => {
console.error('Error fetching related projects:', error);
});
} 
  // Function to display file content
  function displayFileContent(content) {
    const editor = ace.edit("editor");
    editor.setTheme("ace/theme/cobalt"); // Set the theme (optional)
    editor.session.setMode("ace/mode/javascript"); // Set the mode (optional)

    // Clear the editor and set the content
    editor.session.setValue(content);
}


  // Call fetchRelatedProjects function when the page loads
  fetchRelatedProjects('username', 'projectName'); // Replace 'username' and 'projectName' with actual values
});

// Function to load related projects
function loadRelatedProjects(username, projectName) {
  fetch(`/plagiarism/${username}/${projectName}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      const container = document.getElementById('relatedProjectsContainer');
      container.innerHTML = '';

      data.forEach(row => {
        let dataContent = row.data;

        // Parse JSON data if present
        if (typeof dataContent === 'string') {
          try {
            dataContent = JSON.parse(dataContent);
          } catch (error) {
            // If parsing fails, assume it's plain text
          }
        }

        const contentElement = document.createElement('div');
        contentElement.classList.add('file-content');

        // Append the content element to the container
        container.appendChild(contentElement);

        // Create a new Ace Editor instance for the content element
        const editor = ace.edit(contentElement);
        editor.setTheme("ace/theme/merbivore"); // Set the theme
        editor.session.setMode("ace/mode/javascript"); // Set the mode

        // Set the content of the editor
        if (typeof dataContent === 'object') {
          editor.session.setValue(JSON.stringify(dataContent, null, 2));
        } else {
          editor.session.setValue(dataContent);
        }

        // Set editor options
        editor.setReadOnly(true); // Make the editor read-only

        // Adjust editor size if needed
        editor.resize();

        // Scroll the container into view
        container.scrollIntoView({ behavior: 'smooth', block: 'start' });
      });
    })
    .catch(error => {
      console.error('Error fetching related projects:', error);
    });
}


function displayFileContent(filename, content) {
const editor = ace.edit("editor");
editor.setTheme("ace/theme/cobalt"); // Set the theme (optional)
editor.session.setMode("ace/mode/css"); // Set the mode (replace 'css' with the appropriate mode for your content)

// Check if the content is an object (likely JSON data)
if (typeof content === 'object') {
  // Convert the JSON object to a formatted string
  content = JSON.stringify(content, null, 2);
}

// Set the content of the editor
editor.setValue(content);

// Get all the file contents to compare
const allFileContents = Array.from(document.querySelectorAll('.file-item'), fileItem => fileItem.textContent);

// Iterate through each file content to find plagiarized parts
allFileContents.forEach(fileContent => {
  // Highlight plagiarized parts in the editor
  highlightPlagiarizedContent(editor, content, fileContent);
});

// Move the cursor to the beginning of the content
editor.gotoLine(1);
}
    
    document.addEventListener('DOMContentLoaded', function() {
        loadRelatedProjects('username', 'projectName');
    });
    
    
    const fileInput = document.getElementById('fileUpload');
    const fileDisplay = document.querySelector('.file-display');
    
    fileInput.addEventListener('change', function() {
      // Clear previous content in the file display container
      fileDisplay.innerHTML = '';
      
      // Check if the system or browser preference is dark or light mode
      const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Loop through each selected file
      for (let i = 0; i < this.files.length; i++) {
        const file = this.files[i];
        const reader = new FileReader();
        
        reader.onload = function(event) {
          const fileContent = event.target.result;
          
          // Create a new ACE Editor element for each file
          const editorContainer = document.createElement('div');
          editorContainer.classList.add('file-content');
          fileDisplay.appendChild(editorContainer); // Append the editor container to the file display container
          
          // Initialize the ACE Editor
          const editor = ace.edit(editorContainer);
          const theme = "ace/theme/tomorrow_night_bright";
          editor.setTheme(theme); // Set the theme based on dark or light mode
          editor.session.setMode("ace/mode/css"); // Set the mode (optional)
          
          // Set the file content to the ACE Editor
          editor.setValue(fileContent);
          editor.clearSelection();
        };
        
        // Read the file as text
        reader.readAsText(file);
      }
    });
    

/*/ Get the file input element
const fileInput = document.getElementById('fileUpload');
// Get the file display element
const fileDisplay = document.querySelector('.file-display');
// Get the file data display element
const fileContent = document.getElementById('fileContent');

// Add event listener for file input change
fileInput.addEventListener('change', function() {
  // Clear previous file display
  fileDisplay.innerHTML = '';
  // Loop through each selected file
  for (const file of this.files) {
    // Create a div element for each file
    const fileDiv = document.createElement('div');
    // Set the class for styling
    fileDiv.classList.add('file-item');
    // Display the file name
    fileDiv.textContent = file.name;
    // Append the file div to the file display container
    fileDisplay.appendChild(fileDiv);
    
    // Read file content and display it
    readFileContent(file, fileDiv);
  }
});

// Function to read file content and display it
function readFileContent(file, fileDiv) {
  const reader = new FileReader();
  reader.onload = function(event) {
    // Display the file content
    const content = event.target.result;
    if (content.trim() !== '') {
      // Content found, display a checkmark
      fileDiv.textContent = file.name + ' ✔️';
    } else {
      // No content found, display a cross
      fileDiv.textContent = file.name + ' ❌';
    }
  };
  // Read the file as text
  reader.readAsText(file);
}*/


const searchInput = document.getElementById('searchInput');
const projectTable = document.getElementById('projectTable');
const projectBody = document.getElementById('projectBody');
const rows = projectTable.getElementsByTagName('tr');
const searchButton = document.getElementById('searchButton'); // Get the search button element

// Function to hide all rows initially
function hideAllRows() {
  for (let i = 1; i < rows.length; i++) {
    rows[i].style.display = 'none';
  }
}

// Call hideAllRows function initially to hide all rows
hideAllRows();

// Function to filter rows based on search input
// Function to filter rows based on search input
function filterRows() {
  const searchText = searchInput.value.trim().toLowerCase(); // Trim whitespace from input
  if (searchText === '') {
    hideAllRows(); // If search input is empty, hide all rows
    return; // Exit the function
  }
  for (let i = 1; i < rows.length; i++) {
    const projectName = rows[i].getElementsByTagName('td')[1].innerText.toLowerCase();
    if (projectName.includes(searchText)) {
      rows[i].style.display = ''; // Display rows that match the search query
    } else {
      rows[i].style.display = 'none'; // Hide rows that don't match the search query
    }
  }
}


// Add event listener to the search button
searchButton.addEventListener('click', function(event) {
  event.preventDefault(); // Prevent default button behavior
  filterRows(); // Call the filterRows function when the button is clicked
});

searchInput.addEventListener('keyup', function(event) {
  if (event.keyCode === 13) { // Check if Enter key is pressed
    event.preventDefault(); // Prevent default Enter key behavior
    filterRows(); // Call the filterRows function when Enter key is pressed
  }
});

// Pagination variables and functions...

// Pagination variables
let currentPage = 1;
const projectsPerPage = 5; // Number of projects per page

// Function to display projects based on pagination
function displayProjects() {
  let displayedCount = 0;
  const start = (currentPage - 1) * projectsPerPage;
  const end = currentPage * projectsPerPage;
  for (let i = 0; i < rows.length; i++) {
    if (displayedCount < projectsPerPage) {
      if (i >= start && i < end) {
        rows[i].style.display = '';
        displayedCount++;
        console.log(`Displaying row ${i}`);
      } else {
        rows[i].style.display = 'none';
        console.log(`Hiding row ${i}`);
      }
    } else {
      rows[i].style.display = 'none';
      console.log(`Hiding row ${i}`);
    }
  }
}

// Previous page button event listener
document.getElementById('prevButton').addEventListener('click', () => {
  console.log("Previous button clicked");
  if (currentPage > 1) {
    currentPage--;
    displayProjects();
  }
});

// Next page button event listener
document.getElementById('nextButton').addEventListener('click', () => {
  console.log("Next button clicked");
  if (currentPage < Math.ceil(rows.length / projectsPerPage)) {
    currentPage++;
    displayProjects();
  }
});

// Reset display to pagination-based display when search input is cleared
searchInput.addEventListener('input', () => {
  console.log("Input value:", searchInput.value);
  if (searchInput.value === '') {
    currentPage = 1; // Reset current page to 1
    hideAllRows(); // Hide all rows again
  } else {
    filterRows(); // Call filterRows function to update display based on search input
  }
});
</script>

      
  <style>

    .da {
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
      background-color: black;
      color: white;
      height: 20vh;
      overflow-y: auto;
      margin-bottom: 1rem;
    }
    
    #editor {
      font-family: Arial, sans-serif;
      font-size: 14px;
      line-height: 1.6;
      width: 50vw; /* Set the width to 400 pixels */
      word-wrap: break-word; /* Wrap long words */
      
    }
    
    
    
    #plagiarismResultsContainer{
      background-color: #0a75e7;
      padding: 10px;
      color: white;
      border-radius: 0.5rem;
      margin: 1rem;
    }


    .related {
      margin-top: 10px;
      color: white;
      display: flex; /* Use flexbox */
      flex-wrap: wrap; /* Allow items to wrap to the next line */
      cursor: pointer;
      justify-content: center;
    }
    
    .related .file {
      background-color: black; 
      padding: 5px;
      margin-right: 10px; /* Add margin between file names */
      color: white; 
      border-radius: 0.3rem;
      display: inline-block; /* Display files inline */
      /* Set width to accommodate 5 files in a row with margin */
      width: calc(20% - 10px);
      margin-bottom: 10px; /* Add margin at the bottom */
      padding: 10px;
    }
    
    .related .file:hover {
      background-color: rgb(29, 28, 28);
    }


/* Adjustments for responsiveness */
@media (max-width: 768px) {
  .related .file {
    width: 50%; /* Each file takes up 50% of the container width on smaller screens */
  }
}

.file-item {
  background-color: black; 
  padding: 5px;
  margin-right: 10px; /* Add margin between file names */
  color: white; 
  border-radius: 0.3rem;
  display: inline-block; /* Display files inline */
  /* Set width to accommodate 5 files in a row with margin */
  width: calc(20% - 10px);
  margin-bottom: 10px; /* Add margin at the bottom */
  padding: 10px;
}

.file-display {
  margin-top: 10px;
  color: white;
  display: flex; /* Use flexbox */
  flex-wrap: wrap; /* Allow items to wrap to the next line */
  cursor: pointer;
  justify-content: center;
  overflow: auto;
}


.file-content{
  width: 15vw;
  height: 15vh;
  overflow: auto;
  margin: 1rem;
  border-radius: 0.5rem;
  border: 2px solid white;
}

.file-item:hover {
  background-color: rgb(29, 28, 28);
}



    label[for="fileUpload"] {
      display: inline-block;
      padding: 10px;
      background-color: #ff1313;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
    }
    
    #fileUpload {
      display: none;
    }
    

    
    /* Styles for file data */
    .file-data {
      margin-top: 20px;
    }
    
    .file-data h3 {
      margin-bottom: 10px;
    }
    
    /* Styles for ACE Editor */
    #editor {
      width: 50%;
      height: 300px; 
      border: 1px solid #ccc;
      border-radius: 5px;
      position:relative;
    }
    .search {
      display: flex;
      margin-top: 1rem;
      justify-content: center; /* Center horizontally */
      align-items: center;
      margin-left: 2rem;
      margin-right: 2rem;
    }

    .file-input {
      display: flex;
      justify-content: center; /* Center horizontally */
      align-items: center; 
    }

  .file-input p {
    color: white;
    margin-right: 1rem;
    background-color: #4062be;
    padding: 10px;
    border-radius: 0.3rem;
    font-weight: bold;
}

  .file-input label {
      margin-right: 1rem; 
  }
    
    .find{
      justify-content: center; 
      align-items: center;
      background-color: #0056b3;
      margin-top: 2rem;
      margin-left: 2rem;
      border-radius: 0.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 0 5px var(--h1-color);
    }
    #searchInput {
      width: 300px;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
      font-size: 16px;
      margin-top: 1rem;
    }
    
    #searchInput::placeholder {
      color: #999;
    }
    
    #searchInput:focus {
      outline: none;
      border-color: #4CAF50;
      box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
    }
    
    #searchButton {
      background-color: #ff0000;
      font-size: small;
      padding: 7px;
      border: none;
      color: #ffffff;
      border-radius: 0.3rem;
      cursor: pointer;
      margin-bottom: 1rem;
      margin-top: 1rem;
    }
    #searchButton:hover{
      background-color: #f52121;
      border: 1px solid white ;

    }

    #CheckPlagiarism {
      background-color: #ff0000;
      font-size: small;
      padding: 7px;
      border: none;
      color: #ffffff;
      border-radius: 0.3rem;
      cursor: pointer;
      margin-bottom: 1rem;
      margin-top: 1rem;
    }
    #CheckPlagiarism:hover{
      background-color: #f52121;
      border: 1px solid white ;

    }

    .enter{
      text-align-last: center;
    }
    
    .search p{
      color: white;
      margin-right: 1rem;
      background-color: #4062be;
      padding: 10px;
      border-radius: 0.3rem;
      font-weight: bold;

    }

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-right: 1.8rem;
  
}


.order {
  margin: 3rem;
  padding-bottom: 2rem;
  }

table{
  margin-top: 1rem;
  color: var(--h1-color);
}

thead th{
  background-color: #0a75e7;
  width: 30vw;
  color: var(--h1-color);
  font-size: large;
  padding: 10px;
  border-radius: 0.5rem;
  border: 1px solid var(--h1-color);

}

td{
  background:var(--secondary-color);
  padding-left: 0.5rem;
  border-radius: 0.5rem;
  border: 1px solid black;
  color: var(--h1-color);
  border: 2px solid var(--h1-color);

 }

 td:hover{
  background:var(--data-color);
  padding-left: 0.5rem;
  border-radius: 0.5rem;
  border: 2px solid var(--h1-color);
 }

 .data{
  text-align: justify;
  margin-right: 0.5rem;
  padding: 10px;
  color:  var(--h1-color);
 }

.head2{
  width: 80%; 
  background:var(--file-back-color);
  margin-left: 6.5rem;
  text-align: center;
  padding-right: 1.5rem;
  border-radius: 0.3rem;
  margin-top: 2rem;
  padding-top: 0.5rem;
  padding-bottom: 1rem;
  text-decoration: 3px underline;
  color: var(--h1-color);
  box-shadow: 0 0 10px var(--h1-color);
  border: 2px solid rgb(255, 255, 255);
}
 
  </style>
  </html>
  